# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['tiff_imread', 'hasattrs', 'show_image', 'tst_check_tensor']

# Cell
from tifffile import imread
import matplotlib.pyplot as plt
from pathlib import Path
import torch
import numpy as np

# Cell
def tiff_imread(path):
    '''helper function to read tiff file with pathlib object or str'''
    if isinstance(path, str) : return imread(path)
    if isinstance(path, Path): return imread(str(path))


def hasattrs(o,attrs):
    "checks of o has several attrs"
    return all(hasattr(o,attr) for attr in attrs)


def show_image(im, ax=None, title=None, figsize=(4, 5), **kwargs,):
    'plots image from nump or tensor'
    if hasattrs(im, ('data','cpu','permute')):
        im = im.data.cpu()
        if im.shape[0]<5: im=im.permute(1,2,0)
    elif not isinstance(im,np.ndarray): im=array(im)
    if im.shape[-1]==1: im=im[...,0]
    if ax is None: _,ax = plt.subplots(figsize=figsize)
    ax.imshow(im, **kwargs)
    if title is not None: ax.set_title(title)
    ax.axis('off')
    return ax

# Cell
def tst_check_tensor(x):
    "cehcks if x is torch.Tensor"
    assert isinstance(x, torch.Tensor), f'must be torch.tensor not {type(x)}'
    return